<?php

/**
 * @file
 * ECC Parents module hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set service contacts from parent page if not already set.
 */
function ecc_parents_node_presave(EntityInterface $entity) {
  /** @var \Drupal\node\NodeInterface $entity */

  // Add other content types, when required.
  $content_types = ['localgov_guides_page'];

  if (in_array($entity->bundle(), $content_types) && $entity->isNew()) {
    /** @var \Drupal\ecc_parents\Parents $parents_service */
    $parents_service = \Drupal::service('ecc_parents.parents');

    $service_contact = $entity->get('localgov_service_contacts')
      ?->referencedEntities();
    if (empty($service_contact)) {
      if ($parent = $parents_service->getParent($entity)) {
        $parent_service_contacts = $parent->get('localgov_service_contacts')
          ->getValue();
        if ($parent_service_contacts) {
          $entity->set('localgov_service_contacts', $parent_service_contacts);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * When a page is published/unpublished then do the same for its children.
 *
 * Beware of loops! It doesn't look like it's a problem but saving a guide page
 * could try to save the overview again.
 *
 * @see \Drupal\localgov_guides\ChildParentRelationship
 */
function ecc_parents_node_update(EntityInterface $entity) {
  /** @var \Drupal\node\NodeInterface $entity */

  // Add other content types, when required.
  $content_types = ['localgov_guides_overview'];

  if (in_array($entity->bundle(), $content_types)) {
    /** @var \Drupal\ecc_parents\Parents $parents_service */
    $parents_service = \Drupal::service('ecc_parents.parents');

    if (!$entity->original->isPublished() && $entity->isPublished()) {
      foreach ($parents_service->getChildren($entity) as $child) {
        if (!$child->isPublished() && $child->field_publish_with_parent->value) {
          $child->setPublished();
          $child->set('moderation_state', 'published');
          $child->save();
        }
      }
    }
    elseif ($entity->original->isPublished() && !$entity->isPublished()) {
      foreach ($parents_service->getChildren($entity) as $child) {
        if ($child->isPublished() && $child->field_publish_with_parent->value) {
          $child->setUnpublished();
          $child->set('moderation_state', 'archived');
          $child->save();
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Move field_publish_with_parent next to published state.
 */
function ecc_parents_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_publish_with_parent']) && isset($form['advanced'])) {
    $form['field_publish_with_parent']['#group'] = 'footer';
  }
}

/**
 * Implements hook_views_pre_build().
 *
 * Copy value of exposed form element to hidden parameters. This allows filter
 * to work for content types with different parent field.
 */
function ecc_parents_views_pre_build(ViewExecutable $view) {
  if ($view->id() === 'parents') {
    $request = $view->getRequest();
    $parameters = $request->query;
    $parent = $parameters->get('parent');
    $request->query->set('guide_parent', $parent);
    $request->query->set('step_parent', $parent);
    $view->setRequest($request);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ecc_parents_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'parents') {
    $view->element['#attached']['library'][] = 'ecc_parents/views';
  }
}

/**
 * Implements hook_views_data().
 */
function ecc_parents_views_data() {

  $data['node']['ecc_parents_views_field'] = [
    'title' => t('ECC Parent'),
    'help' => t('Parent page for any ECC (LGD) content type.'),
    'field' => [
      'id' => 'ecc_parents_views_field',
    ],
  ];

  return $data;
}
