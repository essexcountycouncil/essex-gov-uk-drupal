stages:
  - build-and-push-images
  - test-build
  - provision-database
  - update-app-service

build_image:
  stage: build-and-push-images
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_PASS: ""
  before_script:
    - apk add py3-pip gcc musl-dev python3-dev libffi-dev openssl openssl-dev cargo make
    - pip install --upgrade pip
    - pip install azure-cli
    - az login --service-principal -u${ARM_CLIENT_ID} -p${ARM_CLIENT_SECRET} -t${ARM_TENANT_ID}
    # - DOCKER_PASSWORD=$(az keyvault secret show --name "acr-admin-password" --vault-name "ecc-dev-kv-de123d9" --query "value")
    - docker login -u${DOCKER_USER} -p${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
  script:
    - docker build -t ${DOCKER_REGISTRY}/portal-drupal-fpm:latest -t portal-drupal-fpm -f Dockerfile-drupal .
    - docker build -t ${DOCKER_REGISTRY}/portal-nginx-drupal:latest -t portal-nginx-drupal -f Dockerfile-nginx .
    - docker push ${DOCKER_REGISTRY}/portal-nginx-drupal
    - docker push ${DOCKER_REGISTRY}/portal-drupal-fpm
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# We need a newer version of gitlab to do this :(
# test-build:
#   stage: test-build
#   image: docker:20.10
#   services:
#     - name: ${DOCKER_REGISTRY}/drupal-fpm:latest
#       variables:
#         MYSQL_DATABASE: ${MYSQL_DATABASE}
#         MYSQL_HOST: ${MYSQL_HOST}
#         MYSQL_USER: ${MYSQL_USER}
#         MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#       command: ["echo 1"]
#   variables:
#     DB_CONN_TEST: ""
#   script:
#       |
#       # Performs a basic test on the drupal image to ensure it can connect to the Database
#       - echo 'Test drupal image for database connectivity....'
#       - DB_CONN_TEST=$(cat DBTestOutput.txt | grep -E '^Database\s+:\sConnected')
#       - if [ -z "$DB_CONN_TEST" ]; then echo "Database connection error in drupal container\n" && exit 1; fi
#   artifacts:
#     paths:
#       - DBTestOutput.txt

provision-database:
  stage: provision-database
  script:
    - echo "To do - Provision database scripting when confirmed with devs"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

update-app-service:
  stage: update-app-service
  before_script:
    - apk add py3-pip gcc musl-dev python3-dev libffi-dev openssl-dev cargo make
    - pip install --upgrade pip
    - pip install azure-cli
    - az login --service-principal -u${ARM_CLIENT_ID} -p${ARM_CLIENT_SECRET} -t${ARM_TENANT_ID}
  script:
    - echo "Creating new revision of Container App"
    - az containerapp revision copy --name portal --resource-group rg-ecc-portal-uks-dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
